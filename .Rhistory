(2+3)/(5+5)     #Parenthesis
9 %% 2     #Calculating Remainder
3^5        #Calculating exponent
#Relational Operators
8 > 7
8 >= 8
#1.3.1 Basic Arithmatic Operations in R
8 + 5      #Addition
8 - 5      #Subtraction
9 * 2      #Multiplication
9/2        #Division
(2+3)/(5+5)     #Parenthesis
9 %% 2     #Calculating Remainder
#Relational Operators
8 > 7
8 >= 8
8 < 7
8 == 8
8 <=7
#Built in Functions
sqrt(2)    #Calculating square root of 2
exp(3)     #Exponential of 3
sin(10)  #Sine of 10 in radians
cos(1.572)  #Cosine of 1.572
help(log)
?log
#Operators & Functions can work within a function (Composite functions)
sin(log10(sqrt(9-8)))             #Take care of parenthesis
x          #Print x
x <- 5     #Assign the value to the variable
x          #Print x
x <- 5     #Assign the value to the variable
x          #Print x
y = 6
y
x == y     # Checking if x is equal to y
9 == 9
cars <- 3
scooters <- 4
cars + scooters       #Addition of two variables
Karan007 <- 23        #Correct Variable Name
007Karan <-  24       #Wrong Variable Name
RAHUL <- 10          #R is case-sensitive
rahul <- 9
Rahul <- 8
TRUE == FALSE
TRUE > FALSE
"my" + "apples"
class ("my")
class(5.325)
#Difference between class & type of
typeof("apple")
typeof(5.325)
x = 4.65
class(x)
class(8 == 6)
#Creating Vectors
# c is a shorthand of combine
age <- c(23, 43, 53, 24, 61, 35, 36, 42, 20, 54)
#Creating Vectors
# c is a shorthand of combine
age <- c(23, 43, 53, 24, 61, 35, 36, 42, 20, 54)
age
my_number <- c(3, 8, 9, 10)
my_number
class(my_number)
y <- c(1.4, "ten")        #R converts y into a Character vector
y
class(y)
class(c(FALSE, 3, "twelve"))
class(c(FALSE, 3, "twelve"))
class(c(FALSE, 3))
class(c(FALSE))
#Accessing Vector elements
my_vector <- c(3, 8, 9, 10)
my_vector[3]                           #Accessing 3rd element of my_vector
my_vector[2:4]                         #Accessing last 3 elements of my_vector
my_vector[-3]   #Returns all elements other than 3rd elements
#Performing different Operations on vectors
my_vector1 <- c(1,3,5,7)
my_vector2 <- c(2,4,6,8)
added_vector <- my_vector1 + my_vector2
added_vector
#Applying functions on Vectors
my_vector1 <- c(1,3,5,7)
min(my_vector1)
sort(my_vector1)
my_vector2 <- c(1, 3, 5, NA, 7, NA)
is.na(my_vector2)
hieghts <- c("medium", "short", "short", "tall", "medium", "medium")
hieghts
hieghts[1] <- "Ultra-short"
hieghts
hieghts <- c("medium", "short", "short", "tall", "medium", "medium")
factor_hieghts <- factor(hieghts)
factor_hieghts
factor_hieghts = factor(hieghts)
factor_hieghts
levels(factor_hieghts)
levels(factor_hieghts)
factor_hieghts[1] <- "Ultra-short"     #This will not work
factor_hieghts
summary(factor_hieghts)
# say we create a numeric vector to store values of a die roll:
dice <- c(1, 2, 4, 5, 5, 3, 2, 6, 3, 5, 6, 2, 1, 4, 3, 6, 5, 3, 2, 2, 5)
#We can convert the vector into 6 factor levels.
dice_levels  <-  factor(dice)
dice_levels
summary(dice_levels)
# say we create a numeric vector to store values of a die roll:
dice <- c(1, 2, 4, 5, 5, 3, 2, 6, 3, 5, 6, 2, 1, 4, 3, 6, 5, 3, 2, 2, 5)
typeof(x)
typeof(y)
typeof(z)
typeof(Z)
typeof(z)
#Relational Operators
8 > 7
8 >= 8
8 < 7
8 == 8
8 <=7
#Relational Operators
8 > 7
8 >= 8
8 < 7
8 == 8
8 <=7
help(log)
?log
log10(10)
"my" + "apples"
class ("my")
class(5.325)
typeof("apple")
typeof(5.325)
#Difference between class & type of
typeof("apple")
typeof(5.325)
x = 4.65
class(x)
class(8 == 6)
#Creating Vectors
# c is a shorthand of combine
age <- c(23, 43, 53, 24, 61, 35, 36, 42, 20, 54)
age
str(iris)
hist(Petal.Witdh)
hist(iris$Petal.Witdh)
hist(iris$Petal.Width)
hist(iris$Sepal.Width)
hist(iris$Petal.Width)
hist(iris$Sepal.Width)
hist(iris$Petal.Width)
hist(iris$Sepal.Width)
hist(iris$Petal.Width)
boxplot(iris$Sepal.Length ~ iris$Species)
str(InsectSprays)
boxplot(InsectSprays$count~InsectSprays$spray)
## Load the ggplot2 package using install.packages("ggplot2")
install.packages("ggplot2")
# After installation completes,type library(ggplot2).
library(ggplot2)
# After installation completes,type library(ggplot2).
library(ggplot2)
# This loads the package into your R environment and makes it ready for use.
# You can type search() to see which packages are ready for use in your environment,
# ggplot2 should appear there now
mtcars
ggplot(mtcars, aes(x = wt,y = mpg, col = factor(cyl))) + geom_point()
ggplot(mtcars, aes(x = wt,y = mpg, col = cyl)) + geom_point()
CO2
str(CO2)
ggplot(CO2,aes(x=conc,y=uptake))+geom_point()
mtcars
install.packages("Rcrawler")
library(Rcrawler)
Rcrawler(Website = "https://timesofindia.indiatimes.com/2018/5/18/archivelist/year-2018,month-5,starttime-43238.cms", no_cores = 4, no_conn = 4)
library(sleep)
sleep
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_bar()
library(ggplot2)
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_bar()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_histogram()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_col()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_freqpoly()
ggplot(sleep, aes(x = ID, y = extra, fill = group)) + geom_col()
MyData <- read.csv(file="E:\sir.csv", header=TRUE, sep=",")
MyData <- read.csv(file="E:\ sir.csv", header=TRUE, sep=",")
summary(train)
CarPrice<- read.csv('CarPrice_Assignment.csv')
head(CarPrice)
set.seed(2017)
split <- sample(seq_len(nrow(CarPrice)), size = floor(0.75 * nrow(CarPrice)))
train <- CarPrice[split, ]
test <- CarPrice[-split, ]
dim(train)
#hypothesize the following subset of the variables as potential predicators
#Construct a new data fram consisting solely of these variables
train <- subset(train, select=c(price,car_ID,fueltype,aspiration,doornumber,carbody,drivewheel,enginelocation,wheelbase,carlength,carwidth,carheight,curbweight,enginetype,cylindernumber,enginesize,fuelsystem,boreratio,stroke,compressionratio,horsepower,peakrpm,citympg,highwaympg))
#checking the training data
head(train)
#checking training data for null values
sapply(train, function(x) sum(is.na(x)))
summary(train)
train <- CarPrice[split, ]
test <- CarPrice[-split, ]
dim(train)
CarPrice<- read.csv('CarPrice_Assignment.csv')
head(CarPrice)
setwd("E:/Linear regression assignment")
CarPrice<- read.csv('CarPrice_Assignment.csv')
head(CarPrice)
set.seed(2017)
split <- sample(seq_len(nrow(CarPrice)), size = floor(0.75 * nrow(CarPrice)))
train <- CarPrice[split, ]
test <- CarPrice[-split, ]
dim(train)
#hypothesize the following subset of the variables as potential predicators
#Construct a new data fram consisting solely of these variables
train <- subset(train, select=c(price,car_ID,fueltype,aspiration,doornumber,carbody,drivewheel,enginelocation,wheelbase,carlength,carwidth,carheight,curbweight,enginetype,cylindernumber,enginesize,fuelsystem,boreratio,stroke,compressionratio,horsepower,peakrpm,citympg,highwaympg))
#checking the training data
head(train)
#checking training data for null values
sapply(train, function(x) sum(is.na(x)))
summary(train)
model <- lm(mtcars$mpg~mtcars$wt, data = mtcars)
summary(model)
